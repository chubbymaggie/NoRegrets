The npm repository contains JavaScript libraries that are used by millions of software developers.
Its semantic versioning system relies on the ability to distinguish between breaking and non-breaking changes when libraries are updated. However, the dynamic nature of JavaScript often causes unintended breaking changes to be detected too late, which undermines the robustness of the applications.

We present a novel technique, \emph{type regression testing}, to automatically determine whether an update of a library implementation affects the types of its public interface, according to how the library is being used by other npm packages.
Type regression testing is implemented in the tool NoRegrets.
A run of NoRegrets is parameterized with a pre-update and post-update version of the library, and it consists of three fully automatic phases.
First, NoRegrets fetches a list of clients that depend upon the pre-update library, and then removes clients whose test suites do not succeed.
Second, NoRegrets uses an ECMAScript 6 proxy instrumentation to generate the API model of both the pre-update and post-update libraries, based on observations of how the clients' test suites interact with the library.
Third, the two models are compared, and certain inconsistencies are reported as type regressions.

Experimental results on 12 widely used libraries show that NoRegrets can identify type-related breaking changes with high accuracy. 
It classifies at least 89\% of the updates correctly as either major or as minor or patch, and it detects 26 breaking changes among the minor and patch updates.

This artifact contains the source code and an installation of NoRegrets, with a guide for how to use the tool and reproduce the experimental results presented in the paper.
